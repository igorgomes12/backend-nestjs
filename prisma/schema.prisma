datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "relationJoins"]
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String
  channel      Int     @default(1)
  status       String  @default("active")
  organization String?

  profile   Profile? @relation("user-to-profiles", fields: [profileId], references: [id])
  profileId Int

  @@map("users")
}

model Profile {
  id   Int    @id @default(autoincrement())
  name String @unique

  user User[] @relation("user-to-profiles")

  @@map("profiles")
}

model Client {
  id                     Int       @id @default(autoincrement())
  identifier             String    @default(uuid())
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  deletedAt              DateTime?
  corporate_name         String
  fantasy_name           String
  contacts               Contact[] @relation("ClientToContacts")
  cpf_cnpj               String
  state_registration     String
  municipal_registration String?
  rural_registration     String?
  name_account           String?
  id_account             Int
  establishment_typeId   Int
  systemsId              Int

  address            Address[]          @relation("ClientToAddress")
  owner              Owner[]            @relation("ClientToOwner")
  establishment_type Establishment_type @relation(fields: [establishment_typeId], references: [id], onDelete: NoAction)
  accounting         Accounting         @relation(fields: [id_account], references: [id], onDelete: NoAction)
  systems            Systems            @relation(fields: [systemsId], references: [id], onDelete: NoAction)
}

model Address {
  id                Int     @id @default(autoincrement())
  identifier        String  @default(uuid())
  street            String
  complement        String?
  postal_code       String
  number            String
  neighborhood      String
  municipality_id   Int
  municipality_name String
  state_id          Int
  state             String
  country_id        Int
  region_id         Int
  description       String?
  main              Boolean

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  client   Client @relation("ClientToAddress", fields: [clientId], references: [id], onDelete: NoAction)
  clientId Int
}

model Contact {
  id           Int     @id @default(autoincrement())
  description  String
  contact      String
  type         String
  main_account Boolean

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  client   Client @relation("ClientToContacts", fields: [clientId], references: [id], onDelete: NoAction)
  clientId Int
}

model Owner {
  id         Int      @id @default(autoincrement())
  name       String
  cpf_cnpj   String
  birth_date DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Client   Client? @relation("ClientToOwner", fields: [clientId], references: [id], onDelete: NoAction)
  clientId Int
}

model Establishment_type {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  status Boolean

  client Client[]
}

model Accounting {
  id      Int    @id @default(autoincrement())
  name    String
  phone   String
  email   String
  contact String
  crc     String
  cnpj    String

  client Client[]
}

model Systems {
  id             Int     @id @default(autoincrement())
  name           String  @unique
  description    String?
  image_url      String?
  stable_version String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  client   Client[]
  versions Systems_Version[] @relation("SystemVersions")
}

model Systems_Version {
  id            Int       @id @default(autoincrement())
  system_id     Int
  version       String
  releases_date String
  description   String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  deletedAt     DateTime?

  system Systems @relation("SystemVersions", fields: [system_id], references: [id], onDelete: Cascade)
}

model Municipio {
  id               Int    @id @default(autoincrement())
  mun_cd_municipio Int
  mun_ds_municipio String
  mun_ds_uf        String
  mun_ds_estado    String
  mun_cd_estado    Int
}

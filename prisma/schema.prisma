datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "relationJoins"]
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String
  channel      Int     @default(1)
  status       String  @default("active")
  organization String?
  profileId    Int

  profile Profile? @relation("user-to-profiles", fields: [profileId], references: [id])

  @@map("users")
}

model Profile {
  id   Int    @id @default(autoincrement())
  name String @unique

  user User[] @relation("user-to-profiles")

  @@map("profiles")
}

model Client {
  id                     Int       @id @default(autoincrement())
  createdAt              DateTime? @default(now())
  updatedAt              DateTime? @updatedAt
  deletedAt              DateTime?
  corporate_name         String
  fantasy_name           String
  contacts               Contact[] @relation("ClientToContacts")
  cpf_cnpj               String
  state_registration     String
  municipal_registration String?
  rural_registration     String?
  name_account           String?
  id_account             Int
  establishment_typeId   Int
  systemsId              Int
  representative_id      Int?

  address            Address[]          @relation("ClientToAddress")
  owner              Owner[]            @relation("ClientToOwner")
  representative     Representative?    @relation("ClientToRepresentative", fields: [representative_id], references: [id])
  establishment_type Establishment_type @relation(fields: [establishment_typeId], references: [id], onDelete: NoAction)
  accounting         Accounting         @relation(fields: [id_account], references: [id], onDelete: NoAction)
  systems            System             @relation(fields: [systemsId], references: [id], onDelete: NoAction)
}

model Address {
  id                Int     @id @default(autoincrement())
  street            String
  complement        String?
  postal_code       String
  number            String
  neighborhood      String
  municipality_id   Int?
  municipality_name String
  state_id          Int?
  state             String
  country_id        Int?
  region_id         Int?
  description       String?
  favorite          Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  client           Client?         @relation("ClientToAddress", fields: [clientId], references: [id], onDelete: NoAction)
  clientId         Int?
  Representative   Representative? @relation("AddressToRepresentative", fields: [representativeId], references: [id])
  representativeId Int?
}

model Contact {
  id          Int     @id @default(autoincrement())
  description String?
  contact     String?
  cellphone   String?
  phone       String?
  type        String?
  email       String?
  favorite    Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  client           Client?         @relation("ClientToContacts", fields: [clientId], references: [id], onDelete: NoAction)
  clientId         Int? // Tornar opcional
  Representative   Representative? @relation("ContactToRepresentative", fields: [representativeId], references: [id])
  representativeId Int?
}

model Owner {
  id         Int      @id @default(autoincrement())
  name       String
  cpf_cnpj   String
  birth_date DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Client   Client? @relation("ClientToOwner", fields: [clientId], references: [id], onDelete: NoAction)
  clientId Int
}

model Establishment_type {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  status Boolean

  client Client[]
}

model Accounting {
  id      Int    @id @default(autoincrement())
  name    String
  phone   String
  email   String
  contact String
  crc     String
  cnpj    String

  client Client[]
}

model System {
  id             Int     @id @default(autoincrement())
  name           String  @unique
  description    String?
  image_url      String?
  stable_version String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  versions                 System_Version[]          @relation("SystemVersions")
  customer_system_versions Customer_System_Version[] @relation("CustomerSystemVersions")
  Client                   Client[]
}

model System_Version {
  id           Int       @id @default(autoincrement())
  system_id    Int
  version      String
  release_date DateTime  @default(now())
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  system System @relation("SystemVersions", fields: [system_id], references: [id])
}

model Customer_System_Version {
  id            Int      @id @default(autoincrement())
  customer_id   Int
  system_id     Int
  version       String
  assigned_date DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  system System @relation("CustomerSystemVersions", fields: [system_id], references: [id], onDelete: Cascade)
}

model Municipio {
  id               Int    @id @default(autoincrement())
  mun_cd_municipio Int
  mun_ds_municipio String
  mun_ds_uf        String
  mun_ds_estado    String
  mun_cd_estado    Int
}

model Contracts {
  id             String         @id @default(uuid())
  customer_id    String
  start_date     DateTime
  end_date       DateTime
  status         ContractStatus
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  first_due_date DateTime
  number         String
  observation    String?
  monthly_fee    Float
  seller_id      String
  fee_type       FeeType

  // Licenses        Licenses[]
  Payments        Payments[]
  ContractHistory ContractHistory[]
}

model Licenses {
  id          Int       @id @default(autoincrement())
  contract_id String
  system_id   Int
  settings    Json
  deleted_at  DateTime?
  monthly_fee Float

  // Contracts Contracts @relation(fields: [contract_id], references: [id])
}

model Payments {
  id           String   @id @default(uuid())
  contract_id  String
  payment_type String
  amount       Float
  payment_data Json
  created_at   DateTime @default(now())
  user_id      String

  Contracts Contracts @relation(fields: [contract_id], references: [id])
}

model ContractHistory {
  id                  String    @id @default(uuid())
  contract_id         String
  old_value           Float
  new_value           Float
  changed_at          DateTime
  changed_by          String
  cancellation_date   DateTime?
  cancellation_reason String?

  Contracts Contracts @relation(fields: [contract_id], references: [id])
}

enum ContractStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum FeeType {
  FIXED
  VARIABLE
}

model Representative {
  id         Int                @id @default(autoincrement())
  name       String
  cellphone  String?
  phone      String?
  supervisor String
  status     String
  type       TypeRepresentative
  region     String
  created_at DateTime?          @default(now())
  updated_at DateTime?          @updatedAt
  deleted_at DateTime?
  deleted_by String?

  clients    Client[]     @relation("ClientToRepresentative")
  contact    Contact[]    @relation("ContactToRepresentative")
  address    Address[]    @relation("AddressToRepresentative")
  commission Commission[] @relation("CommissionToRepresentative")
}

model Commission {
  id               Int            @id @default(autoincrement())
  implantation     Int
  mensality        Int
  representative   Representative @relation("CommissionToRepresentative", fields: [representativeId], references: [id])
  representativeId Int
}

enum TypeRepresentative {
  REPRESENTATIVE
  CONSULTANT
  PARTHER
}

model PaymentsType {
  id         Int       @id @default(autoincrement())
  name       String
  createdAt  DateTime?
  updatedAt  DateTime?
  deleteDate DateTime?
}

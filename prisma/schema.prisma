datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "relationJoins"]
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String
  channel      Int     @default(1)
  status       String  @default("active")
  organization String?

  profile   Profile? @relation("user-to-profiles", fields: [profileId], references: [id])
  profileId Int

  @@map("users")
}

model Profile {
  id   Int    @id @default(autoincrement())
  name String @unique

  user User[] @relation("user-to-profiles")

  @@map("profiles")
}

model Client {
  id                     Int          @id @default(autoincrement())
  identifier             String       @default(uuid())
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  deletedAt              DateTime?
  corporate_name         String
  fantasy_name           String
  contacts               Contact[]    @relation("ClientToContacts")
  cpf_cnpj               String
  state_registration     String
  municipal_registration String?
  rural_registration     String?
  address                Address[]    @relation("ClientToAddress")
  accounting             Accounting[] @relation("ClientToAccounting")
  owner                  Owner[]      @relation("ClientToOwner")
}

model Address {
  id                Int     @id @default(autoincrement())
  identifier        String  @default(uuid())
  street            String
  complement        String?
  postal_code       String
  number            String
  neighborhood      String
  municipality_id   Int
  municipality_name String
  state_id          Int
  state             String
  country_id        Int
  region_id         Int
  description       String?
  main              Boolean

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  client   Client @relation("ClientToAddress", fields: [clientId], references: [id])
  clientId Int
}

model Accounting {
  accounting_id         Int     @id @default(autoincrement())
  observation           String?
  establishment_type_id Int
  taxation_type_id      Int?
  status                String
  company_id            Int     @default(1)
  representative_id     Int?
  owner_id              Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Client    Client?   @relation("ClientToAccounting", fields: [clientId], references: [id])
  clientId  Int
}

enum Type {
  TELEFONE
  CELULAR
  EMAIL
  WHATSAPP
}

model Contact {
  id           Int     @id @default(autoincrement())
  description  String
  contact      String
  type         Type    @default(CELULAR)
  main_account Boolean

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  client   Client @relation("ClientToContacts", fields: [clientId], references: [id])
  clientId Int
}

model Owner {
  id         Int      @id @default(autoincrement())
  name       String
  cpf_cnpj   String
  birth_date DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  Client   Client? @relation("ClientToOwner", fields: [clientId], references: [id])
  clientId Int
}

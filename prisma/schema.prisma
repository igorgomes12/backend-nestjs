datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "relationJoins"]
}

model User {
  id           Int     @id @default(autoincrement())
  name         String  @unique @db.VarChar(50)
  email        String  @unique @db.VarChar(50)
  password     String
  channel      Int     @default(1)
  status       String  @default("active")
  organization String?

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String

  @@map("users")
}

model Profile {
  id   String @id @default(uuid()) @db.VarChar(50)
  name String @unique @db.VarChar(50)

  users User[]

  @@map("profiles")
}

model Client {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now()) @map("created_at")
  corporate         String   @unique @db.VarChar(100)
  fantasy             String   @unique @db.VarChar(100) 
  phone                 String   @unique @db.VarChar(14)
  representative        String   @unique @db.VarChar(50)
  unit                  String
  system                String
  establishmentType     String
  cpf_cnpj               String?  @db.VarChar(20)
  stateRegistration     String   @db.VarChar(20)
  municipalRegistration String?  @db.VarChar(20)
  ruralRegistration     String?  @db.VarChar(20)
  notes                 String?
  status                String
  companyId             Int      @default(1)
  representativeId      Int?
  ownerId               Int?

  addressId     Int?
  contactId     Int?
  contabilityId Int?
  address       Address?     @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contact       Contact?     @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contability   Contability? @relation(fields: [contabilityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organization      Organization    @relation(fields: [organizationId], references: [id])
  representativeRel Representative? @relation(fields: [representativeId], references: [id])
  owner             Owner?          @relation(fields: [ownerId], references: [id])
  organizationId    Int

  @@map("clients")
}

enum contactType {
  Telefone
  Celular
  Email
  WhatsApp

  Facebook
  Instagram
  LinkedIn
  Youtube
  Twitter
}

model Contact {
  id    Int         @id @default(autoincrement())
  name  String      @unique @db.VarChar(50)
  phone String      @unique @db.VarChar(14)
  email String      @unique @db.VarChar(50)
  type  contactType

  clients Client[]

  @@map("contacts")
}

model Contability {
  id             Int    @id @default(autoincrement())
  codContability Int
  name           String @unique @db.VarChar(50)
  phone          String @unique @db.VarChar(14)
  email          String
  contact        String
  crc            String
  cpf_cnpj       String @unique @db.VarChar(14)
  organization   Int

  clients Client[]

  @@map("contabilities")
}

model Address {
  id           Int     @id @default(autoincrement())
  street       String? @db.VarChar(60)
  number       String? @db.VarChar(60)
  complement   String? @db.VarChar(60)
  neighborhood String? @db.VarChar(60)
  city         String? @db.VarChar(60)
  state        String? @db.VarChar(2)
  postalCode   String? @db.VarChar(10)
  isActive     String? @db.VarChar(1)

  organizations Organization[]
  clients       Client[]

  @@map("addresses")
}

model Organization {
  id            Int     @id @default(autoincrement())
  codUnit       Int
  name          String  @unique @db.VarChar(50)
  corporate     String
  cpf_cnpj      String  @unique @db.VarChar(14)
  webServiceKey String? @db.VarChar(1)
  phone         String? @db.VarChar(15)

  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Client    Client[]

  @@map("organizations")
}

model Representative {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  email String @unique @db.VarChar(50)
  phone String @unique @db.VarChar(14)

  clients Client[]

  @@map("representatives")
}

model Owner {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(60)
  cpf_cnpj String   @db.VarChar(15)
  birthday DateTime @default(now())

  clients Client[]

  @@map("owners")
}
